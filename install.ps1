# LocalLLM Auto-Installer f√ºr Windows
# =====================================

param(
    [switch]$NoModels,      # Keine Modelle herunterladen
    [switch]$DevMode,       # Development-Modus
    [string]$InstallPath = "$env:USERPROFILE\LocalLLM"
)

Write-Host "üöÄ LocalLLM Installation startet..." -ForegroundColor Cyan
Write-Host "üìç Installationsort: $InstallPath" -ForegroundColor Yellow

# 1. √úberpr√ºfung und Installation von Node.js
Write-Host "`nüì¶ Node.js wird √ºberpr√ºft..." -ForegroundColor Green
if (!(Get-Command node -ErrorAction SilentlyContinue)) {
    Write-Host "‚ö†Ô∏è  Node.js nicht gefunden. Installation startet..." -ForegroundColor Yellow
    try {
        winget install OpenJS.NodeJS
        Write-Host "‚úÖ Node.js erfolgreich installiert" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Node.js Installation fehlgeschlagen. Bitte manuell von https://nodejs.org installieren" -ForegroundColor Red
        exit 1
    }
} else {
    $nodeVersion = node --version
    Write-Host "‚úÖ Node.js bereits installiert: $nodeVersion" -ForegroundColor Green
}

# 2. Git √ºberpr√ºfen
Write-Host "`nüì¶ Git wird √ºberpr√ºft..." -ForegroundColor Green
if (!(Get-Command git -ErrorAction SilentlyContinue)) {
    Write-Host "‚ö†Ô∏è  Git nicht gefunden. Installation startet..." -ForegroundColor Yellow
    try {
        winget install Git.Git
        Write-Host "‚úÖ Git erfolgreich installiert" -ForegroundColor Green
    }
    catch {
        Write-Host "‚ùå Git Installation fehlgeschlagen. Bitte manuell installieren" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Git bereits installiert" -ForegroundColor Green
}

# 3. Repository klonen
Write-Host "`nüìÇ Repository wird geklont..." -ForegroundColor Green
if (Test-Path $InstallPath) {
    Write-Host "‚ö†Ô∏è  Ordner existiert bereits. Wird aktualisiert..." -ForegroundColor Yellow
    Set-Location $InstallPath
    git pull origin master
} else {
    git clone https://github.com/FBR65/LocalLLM.git $InstallPath
    Set-Location $InstallPath
}
Write-Host "‚úÖ Repository erfolgreich geklont/aktualisiert" -ForegroundColor Green

# 4. Dependencies installieren
Write-Host "`n‚öôÔ∏è  Node.js Dependencies werden installiert..." -ForegroundColor Green
npm install
if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ Dependencies erfolgreich installiert" -ForegroundColor Green
} else {
    Write-Host "‚ùå Dependencies Installation fehlgeschlagen" -ForegroundColor Red
    exit 1
}

# 4.1. PST-Dependencies installieren
Write-Host "`nüìß PST-Verarbeitungs-Abh√§ngigkeiten werden installiert..." -ForegroundColor Green
Write-Host "   (F√ºr E-Mail-Archive und .pst-Dateien)" -ForegroundColor Cyan

$pstPackages = @(
    "pst-parser",
    "pst-extractor", 
    "email-addresses",
    "date-fns",
    "lodash"
)

foreach ($package in $pstPackages) {
    Write-Host "üì¶ Installiere $package..." -ForegroundColor Yellow
    npm install $package
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úÖ $package erfolgreich installiert" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è  $package konnte nicht installiert werden - PST-Funktionen m√∂glicherweise eingeschr√§nkt" -ForegroundColor Yellow
    }
}

Write-Host "‚úÖ PST-Dependencies Installation abgeschlossen" -ForegroundColor Green

# 5. Ollama √ºberpr√ºfen und installieren
Write-Host "`nü§ñ Ollama wird √ºberpr√ºft..." -ForegroundColor Green
if (!(Get-Command ollama -ErrorAction SilentlyContinue)) {
    Write-Host "‚ö†Ô∏è  Ollama nicht gefunden. Installation startet..." -ForegroundColor Yellow
    try {
        winget install Ollama.Ollama
        Write-Host "‚úÖ Ollama erfolgreich installiert" -ForegroundColor Green
        
        # Kurz warten damit Ollama verf√ºgbar ist
        Start-Sleep -Seconds 3
    }
    catch {
        Write-Host "‚ùå Ollama Installation fehlgeschlagen. Bitte manuell von https://ollama.ai installieren" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚úÖ Ollama bereits installiert" -ForegroundColor Green
}

# 6. Ollama Service starten
Write-Host "`nüîÑ Ollama Service wird gestartet..." -ForegroundColor Green
$ollamaProcess = Get-Process -Name "ollama" -ErrorAction SilentlyContinue
if (!$ollamaProcess) {
    Start-Process "ollama" -ArgumentList "serve" -WindowStyle Hidden
    Start-Sleep -Seconds 5
    Write-Host "‚úÖ Ollama Service gestartet" -ForegroundColor Green
} else {
    Write-Host "‚úÖ Ollama Service l√§uft bereits" -ForegroundColor Green
}

# 7. Modelle herunterladen (falls gew√ºnscht)
if (!$NoModels) {
    Write-Host "`nüì• Standard-Modelle werden heruntergeladen..." -ForegroundColor Green
    Write-Host "‚è≥ Dies kann einige Minuten dauern..." -ForegroundColor Yellow
    
    $models = @(
        "gemma3:latest",
        "phi4-mini:latest", 
        "qwen2.5:latest"
    )
    
    foreach ($model in $models) {
        Write-Host "üì¶ Lade $model..." -ForegroundColor Cyan
        ollama pull $model
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úÖ $model erfolgreich heruntergeladen" -ForegroundColor Green
        } else {
            Write-Host "‚ö†Ô∏è  $model konnte nicht heruntergeladen werden" -ForegroundColor Yellow
        }
    }
} else {
    Write-Host "`n‚è≠Ô∏è  Model-Download √ºbersprungen (--NoModels Parameter)" -ForegroundColor Yellow
}

# 8. Startscripts erstellen
Write-Host "`nüìù Startscripts werden erstellt..." -ForegroundColor Green

# Start-Script f√ºr Development
$startDevScript = @"
# LocalLLM Development Starter
Write-Host "üöÄ LocalLLM wird gestartet..." -ForegroundColor Cyan

# Ollama Service √ºberpr√ºfen
`$ollamaProcess = Get-Process -Name "ollama" -ErrorAction SilentlyContinue
if (!`$ollamaProcess) {
    Write-Host "üîÑ Ollama wird gestartet..." -ForegroundColor Yellow
    Start-Process "ollama" -ArgumentList "serve" -WindowStyle Hidden
    Start-Sleep -Seconds 3
}

# LocalLLM Development Server starten
Set-Location "$InstallPath"
Write-Host "üåê Development Server wird gestartet..." -ForegroundColor Green
npm run dev
"@

$startDevScript | Out-File -FilePath "$InstallPath\start-dev.ps1" -Encoding UTF8

# Start-Script f√ºr Production
$startProdScript = @"
# LocalLLM Production Starter
Write-Host "üöÄ LocalLLM wird gestartet..." -ForegroundColor Cyan

# Ollama Service √ºberpr√ºfen
`$ollamaProcess = Get-Process -Name "ollama" -ErrorAction SilentlyContinue
if (!`$ollamaProcess) {
    Write-Host "üîÑ Ollama wird gestartet..." -ForegroundColor Yellow
    Start-Process "ollama" -ArgumentList "serve" -WindowStyle Hidden
    Start-Sleep -Seconds 3
}

# LocalLLM Electron App starten
Set-Location "$InstallPath"
Write-Host "üñ•Ô∏è  Electron App wird gestartet..." -ForegroundColor Green
npm run electron:start
"@

$startProdScript | Out-File -FilePath "$InstallPath\start.ps1" -Encoding UTF8

Write-Host "‚úÖ Startscripts erstellt:" -ForegroundColor Green
Write-Host "   üìÅ start-dev.ps1  (Development)" -ForegroundColor Cyan
Write-Host "   üìÅ start.ps1      (Production)" -ForegroundColor Cyan

# 9. Desktop-Verkn√ºpfung erstellen
Write-Host "`nüîó Desktop-Verkn√ºpfung wird erstellt..." -ForegroundColor Green
$WshShell = New-Object -comObject WScript.Shell
$Shortcut = $WshShell.CreateShortcut("$Home\Desktop\LocalLLM.lnk")
$Shortcut.TargetPath = "powershell.exe"
$Shortcut.Arguments = "-ExecutionPolicy Bypass -File `"$InstallPath\start.ps1`""
$Shortcut.WorkingDirectory = $InstallPath
$Shortcut.IconLocation = "$InstallPath\frontend\static\favicon.ico"
$Shortcut.Description = "LocalLLM Desktop - Lokale KI-Anwendung"
$Shortcut.Save()

# 10. Installation abgeschlossen
Write-Host "`nüéâ Installation erfolgreich abgeschlossen!" -ForegroundColor Green
Write-Host "üìç Installationsort: $InstallPath" -ForegroundColor Cyan
Write-Host "`nüöÄ N√§chste Schritte:" -ForegroundColor Yellow
Write-Host "   1. Development: .\start-dev.ps1" -ForegroundColor White
Write-Host "   2. Production:  .\start.ps1" -ForegroundColor White
Write-Host "   3. Desktop:     LocalLLM Verkn√ºpfung doppelklicken" -ForegroundColor White

if ($DevMode) {
    Write-Host "`nüîß Development-Modus aktiviert - App wird gestartet..." -ForegroundColor Cyan
    & "$InstallPath\start-dev.ps1"
}
